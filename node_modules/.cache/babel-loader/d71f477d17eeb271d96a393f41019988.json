{"ast":null,"code":"//@ts-check\nconst Request = require('./util/Request');\n\nconst Settings = require('./util/Settings');\n/**\r\n * Response Types:\r\n *\r\n * 200: OK\r\n * 400: Bad Request             -> invalid endpoint\r\n * 404: Not Found               -> id doesn't exist\r\n * 405: Method Not Allowed      -> wrong request method\r\n * 429: Too Many Requests       -> request limit is hit.\r\n *\r\n * Source: https://jikan.docs.apiary.io/\r\n */\n\n\nclass JikanAPI {\n  /**\r\n   *\r\n   */\n  constructor() {\n    this.settings = Settings;\n    this.request = new Request();\n  }\n  /**\r\n   *\r\n   * @param {number} id               Anime ID\r\n   * @param {string} [request]       e.g. characters_staff, episodes, news, pictures, videos, stats, forum, moreinfo, reviews, recommendations, userupdates\r\n   * @param {number} [parameter]     can be used to select a specific page for a anime which has more than 100 episodes\r\n   */\n\n\n  loadAnime(id, request, parameter) {\n    return this.request.send(['anime', id, request, parameter]);\n  }\n  /**\r\n   *\r\n   * @param {number} id               Manga ID\r\n   * @param {string} [request]       e.g. characters, news, pictures, stats, forum, moreinfo, reviews, recommendations, userupdates\r\n   */\n\n\n  loadManga(id, request) {\n    return this.request.send(['manga', id, request]);\n  }\n  /**\r\n   *\r\n   * @param {number} id               Person ID\r\n   * @param {string} [request]       e.g. pictures\r\n   */\n\n\n  loadPerson(id, request) {\n    return this.request.send(['person', id, request]);\n  }\n  /**\r\n   *\r\n   * @param {number} id               Character ID\r\n   * @param {string} [request]       e.g. pictures\r\n   */\n\n\n  loadCharacter(id, request) {\n    return this.request.send(['character', id, request]);\n  } // TODO add limit as a search Filter\n  // TODO rebuild to /search/manga?q=Grand%20Blue&page=1\n\n  /**\r\n   * the query needs to be minimum of 3 letters to be processes by MyAnimeList\r\n   * @param {string} type             only [anime, manga, person, character] allowed - version 1.7.1\r\n   * @param {string} query            Search Query\r\n   * @param {number} [page]\r\n   * @param {{}} [params]             needs to be a key value (Parameter / Argument) pair like: {type: 'tv', status: 'airing'}\r\n   */\n\n\n  search(type, query, page = null, params = {}, limit = null) {\n    if (query.length < 3) return Promise.reject(new Error(`The given query must be of minimum 3 letters! Given query '${query}' has only ${query.length} letters.`));\n    params.q = query;\n    if (page) params.page = page;\n    if (limit) params.limit = limit;\n    return this.request.send(['search', type], params);\n  }\n  /**\r\n   *\r\n   * @param {number} year             year\r\n   * @param {string} season           available types [summer, spring, fall, winter]\r\n   */\n\n\n  loadSeason(year, season) {\n    return this.request.send(['season', year, season]);\n  }\n  /**\r\n   *\r\n   */\n\n\n  loadSeasonArchive() {\n    return this.request.send(['season', 'archive']);\n  }\n  /**\r\n   *\r\n   */\n\n\n  loadSeasonLater() {\n    if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n    return this.request.send(['season', 'later']);\n  }\n  /**\r\n   *\r\n   * @param {string} [day]            available type [monday, tuesday, wednesday, thursday, friday, saturday, sunday, other (v3), unknown (v3)]\r\n   */\n\n\n  loadSchedule(day) {\n    return this.request.send(['schedule', day]);\n  }\n  /**\r\n   *\r\n   * @param {string} type             available type [anime, manga, people (v3), characters (v3)]\r\n   * @param {number} [page]           page number (50 items are on one Page)\r\n   * @param {string} [subtype]  \t    [Anime] airing, upcoming, tv, movie, ova, special [Manga] manga, novels, oneshots, doujin, manhwa, manhua [both] bypopularity, favorite\r\n   */\n\n\n  loadTop(type, page, subtype) {\n    return this.request.send(['top', type, page, subtype]);\n  }\n  /**\r\n   *\r\n   * @param {string} type             available type [anime, manga]\r\n   * @param {number} id               genre ID\r\n   * @param {number} [page]           page number\r\n   */\n\n\n  loadGenre(type, id, page) {\n    if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n    return this.request.send(['genre', type, id, page]);\n  }\n  /**\r\n   *\r\n   * @param {number} id               producer ID\r\n   * @param {number} [page]           page number\r\n   */\n\n\n  loadProducer(id, page) {\n    if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n    return this.request.send(['producer', id, page]);\n  }\n  /**\r\n   *\r\n   * @param {number} id               magazine ID\r\n   * @param {number} [page]           page number\r\n   */\n\n\n  loadMagazine(id, page) {\n    if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n    return this.request.send(['magazine', id, page]);\n  }\n  /**\r\n   *\r\n   * @param {string} username         username\r\n   * @param {string} [request]          [profile, history, friends, animelist, mangalist]\r\n   * @param {string} [data]             addition data see API docs\r\n   */\n\n\n  loadUser(username, request, data) {\n    if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n    return this.request.send(['user', username, request, data]);\n  }\n  /**\r\n   *\r\n   * @param {number} id                 Club ID\r\n   */\n\n\n  loadClub(id) {\n    if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n    return this.request.send(['club', id]);\n  }\n  /**\r\n   *\r\n   * @param {number} id               Club ID\r\n   * @param {number} [page]           page number. If this will be left empty, the default is 1\r\n   */\n\n\n  loadClubMembers(id, page) {\n    if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n    return this.request.send(['club', id, 'members', page]);\n  }\n  /**\r\n   * Related to the Jikan REST Instance. --> see the official Jikan documentation\r\n   * [to get status information use the function loadStatus]\r\n   *\r\n   * @param {string} type             e.g. anime, manga, characters, people, search, top, schedule, season\r\n   * @param {string} period           e.g. today, weekly monthly\r\n   * @param {number} [offset]         1000 request are shown for use the offset\r\n   */\n\n\n  loadMeta(type, period, offset) {\n    return this.request.send(['meta', 'requests', type, period, offset]);\n  }\n  /**\r\n   * is for loading the status of the Jikan REST Instance  --> see the official Jikan documentation\r\n   */\n\n\n  loadStatus() {\n    return this.request.send(['meta', 'status']);\n  }\n  /**\r\n   * can be used for stuff not yet covered with the current Jikanjs wrapper version\r\n   * @param {Array} urlParts          e.g. [anime, 1] to load the anime with the id of 1\r\n   * @param {Object} [queryParameter] query Parameter. Needs to be a key value pair like {type: 'tv', status: 'airing'}\r\n   */\n\n\n  raw(urlParts, queryParameter) {\n    if (!Array.isArray(urlParts)) return Promise.reject(new Error(`The given parameter should be an array like [anime, 1] but given was ${urlParts}`));\n    return this.request.send(urlParts, queryParameter);\n  }\n\n}\n\nmodule.exports = new JikanAPI();","map":{"version":3,"sources":["/Users/naman159/Desktop/gitprojs/My-Website/node_modules/jikanjs/lib/jikan.js"],"names":["Request","require","Settings","JikanAPI","constructor","settings","request","loadAnime","id","parameter","send","loadManga","loadPerson","loadCharacter","search","type","query","page","params","limit","length","Promise","reject","Error","q","loadSeason","year","season","loadSeasonArchive","loadSeasonLater","version","loadSchedule","day","loadTop","subtype","loadGenre","loadProducer","loadMagazine","loadUser","username","data","loadClub","loadClubMembers","loadMeta","period","offset","loadStatus","raw","urlParts","queryParameter","Array","isArray","module","exports"],"mappings":"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","sourcesContent":["//@ts-check\r\nconst Request               = require('./util/Request');\r\nconst Settings              = require('./util/Settings');\r\n\r\n/**\r\n * Response Types:\r\n *\r\n * 200: OK\r\n * 400: Bad Request             -> invalid endpoint\r\n * 404: Not Found               -> id doesn't exist\r\n * 405: Method Not Allowed      -> wrong request method\r\n * 429: Too Many Requests       -> request limit is hit.\r\n *\r\n * Source: https://jikan.docs.apiary.io/\r\n */\r\n\r\nclass JikanAPI {\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        this.settings = Settings;\r\n        this.request = new Request();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               Anime ID\r\n     * @param {string} [request]       e.g. characters_staff, episodes, news, pictures, videos, stats, forum, moreinfo, reviews, recommendations, userupdates\r\n     * @param {number} [parameter]     can be used to select a specific page for a anime which has more than 100 episodes\r\n     */\r\n    loadAnime(id, request, parameter) {\r\n        return this.request.send(['anime', id, request, parameter]);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               Manga ID\r\n     * @param {string} [request]       e.g. characters, news, pictures, stats, forum, moreinfo, reviews, recommendations, userupdates\r\n     */\r\n    loadManga(id, request) {\r\n        return this.request.send(['manga', id, request]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               Person ID\r\n     * @param {string} [request]       e.g. pictures\r\n     */\r\n    loadPerson(id, request) {\r\n        return this.request.send(['person', id, request]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               Character ID\r\n     * @param {string} [request]       e.g. pictures\r\n     */\r\n    loadCharacter(id, request) {\r\n        return this.request.send(['character', id, request]);\r\n    }\r\n\r\n    // TODO add limit as a search Filter\r\n    // TODO rebuild to /search/manga?q=Grand%20Blue&page=1\r\n    /**\r\n     * the query needs to be minimum of 3 letters to be processes by MyAnimeList\r\n     * @param {string} type             only [anime, manga, person, character] allowed - version 1.7.1\r\n     * @param {string} query            Search Query\r\n     * @param {number} [page]\r\n     * @param {{}} [params]             needs to be a key value (Parameter / Argument) pair like: {type: 'tv', status: 'airing'}\r\n     */\r\n    search(type, query, page = null, params = {}, limit = null) {\r\n        if(query.length < 3) return Promise.reject(new Error(`The given query must be of minimum 3 letters! Given query '${query}' has only ${query.length} letters.`));\r\n\r\n        params.q = query;\r\n        if(page) params.page = page;\r\n        if(limit) params.limit = limit;\r\n        return this.request.send(['search', type], params);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} year             year\r\n     * @param {string} season           available types [summer, spring, fall, winter]\r\n     */\r\n    loadSeason(year, season) {\r\n        return this.request.send(['season', year, season]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    loadSeasonArchive() {\r\n        return this.request.send(['season', 'archive']);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    loadSeasonLater() {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['season', 'later']);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} [day]            available type [monday, tuesday, wednesday, thursday, friday, saturday, sunday, other (v3), unknown (v3)]\r\n     */\r\n    loadSchedule(day) {\r\n        return this.request.send(['schedule', day]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} type             available type [anime, manga, people (v3), characters (v3)]\r\n     * @param {number} [page]           page number (50 items are on one Page)\r\n     * @param {string} [subtype]  \t    [Anime] airing, upcoming, tv, movie, ova, special [Manga] manga, novels, oneshots, doujin, manhwa, manhua [both] bypopularity, favorite\r\n     */\r\n    loadTop(type, page, subtype) {\r\n        return this.request.send(['top', type, page, subtype]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} type             available type [anime, manga]\r\n     * @param {number} id               genre ID\r\n     * @param {number} [page]           page number\r\n     */\r\n    loadGenre(type, id, page) {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['genre', type, id, page]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               producer ID\r\n     * @param {number} [page]           page number\r\n     */\r\n    loadProducer(id, page) {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['producer', id, page]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               magazine ID\r\n     * @param {number} [page]           page number\r\n     */\r\n    loadMagazine(id, page) {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['magazine', id, page]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} username         username\r\n     * @param {string} [request]          [profile, history, friends, animelist, mangalist]\r\n     * @param {string} [data]             addition data see API docs\r\n     */\r\n    loadUser(username, request, data) {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['user', username, request, data]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id                 Club ID\r\n     */\r\n    loadClub(id) {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['club', id]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               Club ID\r\n     * @param {number} [page]           page number. If this will be left empty, the default is 1\r\n     */\r\n    loadClubMembers(id, page) {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['club', id, 'members', page]);\r\n    }\r\n\r\n    /**\r\n     * Related to the Jikan REST Instance. --> see the official Jikan documentation\r\n     * [to get status information use the function loadStatus]\r\n     *\r\n     * @param {string} type             e.g. anime, manga, characters, people, search, top, schedule, season\r\n     * @param {string} period           e.g. today, weekly monthly\r\n     * @param {number} [offset]         1000 request are shown for use the offset\r\n     */\r\n    loadMeta(type, period, offset) {\r\n        return this.request.send(['meta', 'requests', type, period, offset]);\r\n    }\r\n\r\n    /**\r\n     * is for loading the status of the Jikan REST Instance  --> see the official Jikan documentation\r\n     */\r\n    loadStatus() {\r\n        return this.request.send(['meta', 'status']);\r\n    }\r\n\r\n    /**\r\n     * can be used for stuff not yet covered with the current Jikanjs wrapper version\r\n     * @param {Array} urlParts          e.g. [anime, 1] to load the anime with the id of 1\r\n     * @param {Object} [queryParameter] query Parameter. Needs to be a key value pair like {type: 'tv', status: 'airing'}\r\n     */\r\n    raw(urlParts, queryParameter) {\r\n        if(!Array.isArray(urlParts)) return Promise.reject(new Error(`The given parameter should be an array like [anime, 1] but given was ${urlParts}`));\r\n        return this.request.send(urlParts, queryParameter);\r\n    }\r\n}\r\n\r\nmodule.exports = new JikanAPI();\r\n"]},"metadata":{},"sourceType":"script"}