{"ast":null,"code":"var _classCallCheck = require(\"/Users/naman159/Desktop/gitprojs/My-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/naman159/Desktop/gitprojs/My-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n//@ts-check\nvar Request = require('./util/Request');\n\nvar Settings = require('./util/Settings');\n/**\r\n * Response Types:\r\n *\r\n * 200: OK\r\n * 400: Bad Request             -> invalid endpoint\r\n * 404: Not Found               -> id doesn't exist\r\n * 405: Method Not Allowed      -> wrong request method\r\n * 429: Too Many Requests       -> request limit is hit.\r\n *\r\n * Source: https://jikan.docs.apiary.io/\r\n */\n\n\nvar JikanAPI = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   *\r\n   */\n  function JikanAPI() {\n    _classCallCheck(this, JikanAPI);\n\n    this.settings = Settings;\n    this.request = new Request();\n  }\n  /**\r\n   *\r\n   * @param {number} id               Anime ID\r\n   * @param {string} [request]       e.g. characters_staff, episodes, news, pictures, videos, stats, forum, moreinfo, reviews, recommendations, userupdates\r\n   * @param {number} [parameter]     can be used to select a specific page for a anime which has more than 100 episodes\r\n   */\n\n\n  _createClass(JikanAPI, [{\n    key: \"loadAnime\",\n    value: function loadAnime(id, request, parameter) {\n      return this.request.send(['anime', id, request, parameter]);\n    }\n    /**\r\n     *\r\n     * @param {number} id               Manga ID\r\n     * @param {string} [request]       e.g. characters, news, pictures, stats, forum, moreinfo, reviews, recommendations, userupdates\r\n     */\n\n  }, {\n    key: \"loadManga\",\n    value: function loadManga(id, request) {\n      return this.request.send(['manga', id, request]);\n    }\n    /**\r\n     *\r\n     * @param {number} id               Person ID\r\n     * @param {string} [request]       e.g. pictures\r\n     */\n\n  }, {\n    key: \"loadPerson\",\n    value: function loadPerson(id, request) {\n      return this.request.send(['person', id, request]);\n    }\n    /**\r\n     *\r\n     * @param {number} id               Character ID\r\n     * @param {string} [request]       e.g. pictures\r\n     */\n\n  }, {\n    key: \"loadCharacter\",\n    value: function loadCharacter(id, request) {\n      return this.request.send(['character', id, request]);\n    } // TODO add limit as a search Filter\n    // TODO rebuild to /search/manga?q=Grand%20Blue&page=1\n\n    /**\r\n     * the query needs to be minimum of 3 letters to be processes by MyAnimeList\r\n     * @param {string} type             only [anime, manga, person, character] allowed - version 1.7.1\r\n     * @param {string} query            Search Query\r\n     * @param {number} [page]\r\n     * @param {{}} [params]             needs to be a key value (Parameter / Argument) pair like: {type: 'tv', status: 'airing'}\r\n     */\n\n  }, {\n    key: \"search\",\n    value: function search(type, query) {\n      var page = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      if (query.length < 3) return Promise.reject(new Error(\"The given query must be of minimum 3 letters! Given query '\".concat(query, \"' has only \").concat(query.length, \" letters.\")));\n      params.q = query;\n      if (page) params.page = page;\n      if (limit) params.limit = limit;\n      return this.request.send(['search', type], params);\n    }\n    /**\r\n     *\r\n     * @param {number} year             year\r\n     * @param {string} season           available types [summer, spring, fall, winter]\r\n     */\n\n  }, {\n    key: \"loadSeason\",\n    value: function loadSeason(year, season) {\n      return this.request.send(['season', year, season]);\n    }\n    /**\r\n     *\r\n     */\n\n  }, {\n    key: \"loadSeasonArchive\",\n    value: function loadSeasonArchive() {\n      return this.request.send(['season', 'archive']);\n    }\n    /**\r\n     *\r\n     */\n\n  }, {\n    key: \"loadSeasonLater\",\n    value: function loadSeasonLater() {\n      if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n      return this.request.send(['season', 'later']);\n    }\n    /**\r\n     *\r\n     * @param {string} [day]            available type [monday, tuesday, wednesday, thursday, friday, saturday, sunday, other (v3), unknown (v3)]\r\n     */\n\n  }, {\n    key: \"loadSchedule\",\n    value: function loadSchedule(day) {\n      return this.request.send(['schedule', day]);\n    }\n    /**\r\n     *\r\n     * @param {string} type             available type [anime, manga, people (v3), characters (v3)]\r\n     * @param {number} [page]           page number (50 items are on one Page)\r\n     * @param {string} [subtype]  \t    [Anime] airing, upcoming, tv, movie, ova, special [Manga] manga, novels, oneshots, doujin, manhwa, manhua [both] bypopularity, favorite\r\n     */\n\n  }, {\n    key: \"loadTop\",\n    value: function loadTop(type, page, subtype) {\n      return this.request.send(['top', type, page, subtype]);\n    }\n    /**\r\n     *\r\n     * @param {string} type             available type [anime, manga]\r\n     * @param {number} id               genre ID\r\n     * @param {number} [page]           page number\r\n     */\n\n  }, {\n    key: \"loadGenre\",\n    value: function loadGenre(type, id, page) {\n      if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n      return this.request.send(['genre', type, id, page]);\n    }\n    /**\r\n     *\r\n     * @param {number} id               producer ID\r\n     * @param {number} [page]           page number\r\n     */\n\n  }, {\n    key: \"loadProducer\",\n    value: function loadProducer(id, page) {\n      if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n      return this.request.send(['producer', id, page]);\n    }\n    /**\r\n     *\r\n     * @param {number} id               magazine ID\r\n     * @param {number} [page]           page number\r\n     */\n\n  }, {\n    key: \"loadMagazine\",\n    value: function loadMagazine(id, page) {\n      if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n      return this.request.send(['magazine', id, page]);\n    }\n    /**\r\n     *\r\n     * @param {string} username         username\r\n     * @param {string} [request]          [profile, history, friends, animelist, mangalist]\r\n     * @param {string} [data]             addition data see API docs\r\n     */\n\n  }, {\n    key: \"loadUser\",\n    value: function loadUser(username, request, data) {\n      if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n      return this.request.send(['user', username, request, data]);\n    }\n    /**\r\n     *\r\n     * @param {number} id                 Club ID\r\n     */\n\n  }, {\n    key: \"loadClub\",\n    value: function loadClub(id) {\n      if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n      return this.request.send(['club', id]);\n    }\n    /**\r\n     *\r\n     * @param {number} id               Club ID\r\n     * @param {number} [page]           page number. If this will be left empty, the default is 1\r\n     */\n\n  }, {\n    key: \"loadClubMembers\",\n    value: function loadClubMembers(id, page) {\n      if (this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\n      return this.request.send(['club', id, 'members', page]);\n    }\n    /**\r\n     * Related to the Jikan REST Instance. --> see the official Jikan documentation\r\n     * [to get status information use the function loadStatus]\r\n     *\r\n     * @param {string} type             e.g. anime, manga, characters, people, search, top, schedule, season\r\n     * @param {string} period           e.g. today, weekly monthly\r\n     * @param {number} [offset]         1000 request are shown for use the offset\r\n     */\n\n  }, {\n    key: \"loadMeta\",\n    value: function loadMeta(type, period, offset) {\n      return this.request.send(['meta', 'requests', type, period, offset]);\n    }\n    /**\r\n     * is for loading the status of the Jikan REST Instance  --> see the official Jikan documentation\r\n     */\n\n  }, {\n    key: \"loadStatus\",\n    value: function loadStatus() {\n      return this.request.send(['meta', 'status']);\n    }\n    /**\r\n     * can be used for stuff not yet covered with the current Jikanjs wrapper version\r\n     * @param {Array} urlParts          e.g. [anime, 1] to load the anime with the id of 1\r\n     * @param {Object} [queryParameter] query Parameter. Needs to be a key value pair like {type: 'tv', status: 'airing'}\r\n     */\n\n  }, {\n    key: \"raw\",\n    value: function raw(urlParts, queryParameter) {\n      if (!Array.isArray(urlParts)) return Promise.reject(new Error(\"The given parameter should be an array like [anime, 1] but given was \".concat(urlParts)));\n      return this.request.send(urlParts, queryParameter);\n    }\n  }]);\n\n  return JikanAPI;\n}();\n\nmodule.exports = new JikanAPI();","map":{"version":3,"sources":["/Users/naman159/Desktop/gitprojs/My-Website/node_modules/jikanjs/lib/jikan.js"],"names":["Request","require","Settings","JikanAPI","settings","request","id","parameter","send","type","query","page","params","limit","length","Promise","reject","Error","q","year","season","version","day","subtype","username","data","period","offset","urlParts","queryParameter","Array","isArray","module","exports"],"mappings":"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","sourcesContent":["//@ts-check\r\nconst Request               = require('./util/Request');\r\nconst Settings              = require('./util/Settings');\r\n\r\n/**\r\n * Response Types:\r\n *\r\n * 200: OK\r\n * 400: Bad Request             -> invalid endpoint\r\n * 404: Not Found               -> id doesn't exist\r\n * 405: Method Not Allowed      -> wrong request method\r\n * 429: Too Many Requests       -> request limit is hit.\r\n *\r\n * Source: https://jikan.docs.apiary.io/\r\n */\r\n\r\nclass JikanAPI {\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        this.settings = Settings;\r\n        this.request = new Request();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               Anime ID\r\n     * @param {string} [request]       e.g. characters_staff, episodes, news, pictures, videos, stats, forum, moreinfo, reviews, recommendations, userupdates\r\n     * @param {number} [parameter]     can be used to select a specific page for a anime which has more than 100 episodes\r\n     */\r\n    loadAnime(id, request, parameter) {\r\n        return this.request.send(['anime', id, request, parameter]);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               Manga ID\r\n     * @param {string} [request]       e.g. characters, news, pictures, stats, forum, moreinfo, reviews, recommendations, userupdates\r\n     */\r\n    loadManga(id, request) {\r\n        return this.request.send(['manga', id, request]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               Person ID\r\n     * @param {string} [request]       e.g. pictures\r\n     */\r\n    loadPerson(id, request) {\r\n        return this.request.send(['person', id, request]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               Character ID\r\n     * @param {string} [request]       e.g. pictures\r\n     */\r\n    loadCharacter(id, request) {\r\n        return this.request.send(['character', id, request]);\r\n    }\r\n\r\n    // TODO add limit as a search Filter\r\n    // TODO rebuild to /search/manga?q=Grand%20Blue&page=1\r\n    /**\r\n     * the query needs to be minimum of 3 letters to be processes by MyAnimeList\r\n     * @param {string} type             only [anime, manga, person, character] allowed - version 1.7.1\r\n     * @param {string} query            Search Query\r\n     * @param {number} [page]\r\n     * @param {{}} [params]             needs to be a key value (Parameter / Argument) pair like: {type: 'tv', status: 'airing'}\r\n     */\r\n    search(type, query, page = null, params = {}, limit = null) {\r\n        if(query.length < 3) return Promise.reject(new Error(`The given query must be of minimum 3 letters! Given query '${query}' has only ${query.length} letters.`));\r\n\r\n        params.q = query;\r\n        if(page) params.page = page;\r\n        if(limit) params.limit = limit;\r\n        return this.request.send(['search', type], params);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} year             year\r\n     * @param {string} season           available types [summer, spring, fall, winter]\r\n     */\r\n    loadSeason(year, season) {\r\n        return this.request.send(['season', year, season]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    loadSeasonArchive() {\r\n        return this.request.send(['season', 'archive']);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    loadSeasonLater() {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['season', 'later']);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} [day]            available type [monday, tuesday, wednesday, thursday, friday, saturday, sunday, other (v3), unknown (v3)]\r\n     */\r\n    loadSchedule(day) {\r\n        return this.request.send(['schedule', day]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} type             available type [anime, manga, people (v3), characters (v3)]\r\n     * @param {number} [page]           page number (50 items are on one Page)\r\n     * @param {string} [subtype]  \t    [Anime] airing, upcoming, tv, movie, ova, special [Manga] manga, novels, oneshots, doujin, manhwa, manhua [both] bypopularity, favorite\r\n     */\r\n    loadTop(type, page, subtype) {\r\n        return this.request.send(['top', type, page, subtype]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} type             available type [anime, manga]\r\n     * @param {number} id               genre ID\r\n     * @param {number} [page]           page number\r\n     */\r\n    loadGenre(type, id, page) {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['genre', type, id, page]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               producer ID\r\n     * @param {number} [page]           page number\r\n     */\r\n    loadProducer(id, page) {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['producer', id, page]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               magazine ID\r\n     * @param {number} [page]           page number\r\n     */\r\n    loadMagazine(id, page) {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['magazine', id, page]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} username         username\r\n     * @param {string} [request]          [profile, history, friends, animelist, mangalist]\r\n     * @param {string} [data]             addition data see API docs\r\n     */\r\n    loadUser(username, request, data) {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['user', username, request, data]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id                 Club ID\r\n     */\r\n    loadClub(id) {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['club', id]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} id               Club ID\r\n     * @param {number} [page]           page number. If this will be left empty, the default is 1\r\n     */\r\n    loadClubMembers(id, page) {\r\n        if(this.settings.version < 3) return Promise.reject(new Error('Usable at API version 3+'));\r\n        return this.request.send(['club', id, 'members', page]);\r\n    }\r\n\r\n    /**\r\n     * Related to the Jikan REST Instance. --> see the official Jikan documentation\r\n     * [to get status information use the function loadStatus]\r\n     *\r\n     * @param {string} type             e.g. anime, manga, characters, people, search, top, schedule, season\r\n     * @param {string} period           e.g. today, weekly monthly\r\n     * @param {number} [offset]         1000 request are shown for use the offset\r\n     */\r\n    loadMeta(type, period, offset) {\r\n        return this.request.send(['meta', 'requests', type, period, offset]);\r\n    }\r\n\r\n    /**\r\n     * is for loading the status of the Jikan REST Instance  --> see the official Jikan documentation\r\n     */\r\n    loadStatus() {\r\n        return this.request.send(['meta', 'status']);\r\n    }\r\n\r\n    /**\r\n     * can be used for stuff not yet covered with the current Jikanjs wrapper version\r\n     * @param {Array} urlParts          e.g. [anime, 1] to load the anime with the id of 1\r\n     * @param {Object} [queryParameter] query Parameter. Needs to be a key value pair like {type: 'tv', status: 'airing'}\r\n     */\r\n    raw(urlParts, queryParameter) {\r\n        if(!Array.isArray(urlParts)) return Promise.reject(new Error(`The given parameter should be an array like [anime, 1] but given was ${urlParts}`));\r\n        return this.request.send(urlParts, queryParameter);\r\n    }\r\n}\r\n\r\nmodule.exports = new JikanAPI();\r\n"]},"metadata":{},"sourceType":"script"}