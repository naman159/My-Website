{"ast":null,"code":"//@ts-check\nconst Settings = require('./Settings');\n\nconst fetch = require('cross-fetch');\n\nclass Request {\n  /**\r\n   * sends a request with the given list of URL parts and the optional list of query parameter\r\n   * @param {*[]} args           URL Parts\r\n   * @param {{}} [parameter]     Query Parameter\r\n   * @returns {Promise<*>} returns the request response or an error\r\n   */\n  async send(args, parameter) {\n    var response = await fetch(this.urlBuilder(args, parameter));\n    var data = await response.json();\n    if (response.status !== 200) return Promise.reject(new Error(data.error));\n    return Promise.resolve(data);\n  }\n  /**\r\n   *\r\n   * @param {*[]} args            URL Parts\r\n   * @param {{}} [parameter]      Query Parameter\r\n   * @returns {string}            URL\r\n   */\n\n\n  urlBuilder(args, parameter) {\n    var url = new URL(Settings.getBaseURL());\n    url.pathname += '/' + args.filter(x => x).join('/');\n    if (parameter) Object.entries(parameter).forEach(([key, value]) => url.searchParams.append(key, value));\n    return url.href;\n  }\n\n}\n\nmodule.exports = Request;","map":{"version":3,"sources":["/Users/naman159/Desktop/gitprojs/My-Website/node_modules/jikanjs/lib/util/Request.js"],"names":["Settings","require","fetch","Request","send","args","parameter","response","urlBuilder","data","json","status","Promise","reject","Error","error","resolve","url","URL","getBaseURL","pathname","filter","x","join","Object","entries","forEach","key","value","searchParams","append","href","module","exports"],"mappings":"AAAA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAArB;;AAEA,MAAME,OAAN,CAAc;AAEV;;;;;;AAMA,QAAMC,IAAN,CAAWC,IAAX,EAAiBC,SAAjB,EAA4B;AACxB,QAAIC,QAAQ,GAAG,MAAML,KAAK,CAAC,KAAKM,UAAL,CAAgBH,IAAhB,EAAsBC,SAAtB,CAAD,CAA1B;AACA,QAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AAEA,QAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B,OAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAUL,IAAI,CAACM,KAAf,CAAf,CAAP;AAC7B,WAAOH,OAAO,CAACI,OAAR,CAAgBP,IAAhB,CAAP;AACH;AAED;;;;;;;;AAMAD,EAAAA,UAAU,CAACH,IAAD,EAAOC,SAAP,EAAkB;AACxB,QAAIW,GAAG,GAAG,IAAIC,GAAJ,CAAQlB,QAAQ,CAACmB,UAAT,EAAR,CAAV;AAEAF,IAAAA,GAAG,CAACG,QAAJ,IAAgB,MAAMf,IAAI,CAACgB,MAAL,CAAYC,CAAC,IAAIA,CAAjB,EAAoBC,IAApB,CAAyB,GAAzB,CAAtB;AACA,QAAIjB,SAAJ,EAAekB,MAAM,CAACC,OAAP,CAAenB,SAAf,EAA0BoB,OAA1B,CAAkC,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkBX,GAAG,CAACY,YAAJ,CAAiBC,MAAjB,CAAwBH,GAAxB,EAA6BC,KAA7B,CAApD;AAEf,WAAOX,GAAG,CAACc,IAAX;AACH;;AA7BS;;AAgCdC,MAAM,CAACC,OAAP,GAAiB9B,OAAjB","sourcesContent":["//@ts-check\r\n\r\nconst Settings = require('./Settings');\r\nconst fetch = require('cross-fetch');\r\n\r\nclass Request {\r\n\r\n    /**\r\n     * sends a request with the given list of URL parts and the optional list of query parameter\r\n     * @param {*[]} args           URL Parts\r\n     * @param {{}} [parameter]     Query Parameter\r\n     * @returns {Promise<*>} returns the request response or an error\r\n     */\r\n    async send(args, parameter) {\r\n        var response = await fetch(this.urlBuilder(args, parameter));\r\n        var data = await response.json();\r\n\r\n        if (response.status !== 200) return Promise.reject(new Error(data.error));\r\n        return Promise.resolve(data);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*[]} args            URL Parts\r\n     * @param {{}} [parameter]      Query Parameter\r\n     * @returns {string}            URL\r\n     */\r\n    urlBuilder(args, parameter) {\r\n        var url = new URL(Settings.getBaseURL());\r\n\r\n        url.pathname += '/' + args.filter(x => x).join('/');\r\n        if (parameter) Object.entries(parameter).forEach(([key, value]) => url.searchParams.append(key, value));\r\n\r\n        return url.href;\r\n    }\r\n}\r\n\r\nmodule.exports = Request;\r\n"]},"metadata":{},"sourceType":"script"}